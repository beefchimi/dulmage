---
import Page from '@layouts/Page.astro';

import {NAV_ID, NAV_TOGGLE_ID, OVERLAY_ID} from '@data/app';
import {sections} from '@data/sections';

import Contact from '@components/Contact.astro';
import Hamburger from '@components/Hamburger.astro';
import Navigation from '@components/Navigation.astro';
import Project from '@components/Project.astro';

import Intro from '@sections/Intro.astro';
import ProjectOverlay from '@sections/ProjectOverlay.astro';

const [intro, ...portfolioSections] = sections;
---

<Page id="PageHome" title="Curtis Dulmage | UX Developer / Ottawa Canada">
  <Navigation id={NAV_ID} items={sections}>
    <Contact />
    <Hamburger id={NAV_TOGGLE_ID} controlsId={NAV_ID} />
  </Navigation>

  <main id="Portfolio" class="Portfolio">
    <Intro id={intro.id} thumbnail={intro.thumbnail} />

    {
      portfolioSections.map(({channels: _channels, ...props}) => (
        <Project {...props} />
      ))
    }
  </main>

  <ProjectOverlay id={OVERLAY_ID} />
</Page>

<style>
  .Portfolio {
    background-color: var(--color-portfolio);
  }
</style>

<script>
  import {NAV_ID, NAV_TOGGLE_ID, OVERLAY_ID, PERSONAL_EMAIL} from '@data/app';

  import {NavTracker} from '@scripts/NavTracker';
  import {Overlay} from '@scripts/Overlay';
  import {Portfolio} from '@scripts/Portfolio';
  import {SecretEmail} from '@scripts/SecretEmail';
  import {Toggler} from '@scripts/Toggler';

  const navTrackerInstance = new NavTracker(`#${NAV_ID} li`);
  navTrackerInstance.update();

  const overlayInstance = new Overlay(OVERLAY_ID);
  overlayInstance.init();

  const portfolioInstance = new Portfolio({}, ({mostVisibleIndex}) => {
    navTrackerInstance.safeUpdate(mostVisibleIndex);
  });
  portfolioInstance.init();

  const emailInstance = new SecretEmail(PERSONAL_EMAIL);
  emailInstance.replaceEmails();

  const togglerInstance = new Toggler(NAV_TOGGLE_ID, NAV_ID);
  togglerInstance.init();

  // Even with smooth scrolling, this is necessary to mitigate some of
  // the issues that arise from `lvh` sections + scroll tracking.
  function handleHashChange() {
    navTrackerInstance.safeUpdate(portfolioInstance.mostVisibleIndex);
  }

  window.addEventListener('hashchange', handleHashChange, false);
</script>
