////
/// Shared Utilities
/// Layout
////

@import 'functions';

// Styles for (un)locking the ability to scroll the document.
// Requires the `data-html-scroll` attribute on <html>.
// Toggling of the attribute value is handled via JS.
@mixin scroll-lock {
  &[data-scroll-lock],
  &[data-scroll-lock] body {
    height: 100%;
  }

  &[data-scroll-lock='true'],
  &[data-scroll-lock='true'] body {
    overflow: hidden;
    max-height: 100vh;
  }
}

// Quick and easy max-width centered layout
@mixin centered-width($max-width: null) {
  max-width: $max-width;
  margin-right: auto;
  margin-left: auto;
}

// To be used on flex items. Resolves some common layout issues, such as
// text truncation not respecting padding or breaking out of container.
// https://css-tricks.com/flexbox-truncated-text/
@mixin flex-item-fix {
  min-width: 0;
  max-width: 100%;
}

// perhaps remove this in favour of a ui-helper?
@mixin flex-center($full-height: false) {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;

  @if $full-height {
    height: 100vh;
  }
}

// Toggle visibility + opacity + pointer-events
// @param {Boolean} $state - Switch visibility "on" `(true)` or "off" `(false)`. Defaults to `true`.
@mixin visible($isVisible: true) {
  @if ($isVisible) {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  } @else {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
  }
}

// Remove item from layout, but leave visible to screenreaders
@mixin visually-hidden {
  clip: rect(0 0 0 0);
  position: absolute;
  overflow: hidden;
  margin: -0.1rem;
  padding: 0;
  width: 0.1rem;
  height: 0.1rem;
  border: 0;
}

// Set an element to cover its closest relatively positioned parent.
// @param {String} $position (optional) - The position value you wish to use.
@mixin position-cover($position: absolute) {
  position: $position;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
}

// Private mixin: used by `aspect-ratio()`
// @param {Number} $padding - Value to be used for padding-top.
@mixin _aspect-ratio-padding-top($padding: 0%) {
  padding-top: $padding;
  width: 100%;
  height: 0;
}

// Flexible element that retains its aspect-ratio
// @param {Number} $width - Unitless ratio value used to represent width.
// @param {Number} $height - Unitless ratio value used to represent height.
// @param {Boolean} $psuedo (optional) - If you want the sizing to be managed by a ::before element.
@mixin aspect-ratio($width, $height, $pseudo: false) {
  $width: strip-unit($width);
  $height: strip-unit($height);

  $ratio-percentage: ($height / $width) * 100%;
  position: relative;
  overflow: hidden;

  @if ($pseudo) {
    &::before {
      @include _aspect-ratio-padding-top($ratio-percentage);
      content: '';
      display: block;
      pointer-events: none;
    }

    // selector will not include pseudo elements
    > * {
      @include position-cover(absolute);
    }
  } @else {
    @include _aspect-ratio-padding-top($ratio-percentage);
  }
}
